race_strata = 'none',
race_level = NA_character_,
additional_strata1 = 'Sex',
additional_strata_level = Sex,
sex_strata = 'none',
sex_level = NA_character_)
wis1 <- read_csv('./Data/Archive/wisqars_self_harm/Raw/2025_04_15_self_harm.csv') %>%
mutate(Outcome_value1=as.numeric(`Crude Rate`), age_level=`Age Group`) %>%
dplyr::select(age_level,Sex, Year,Outcome_value1) %>%
mutate(outcome_type='Self harm',
outcome_label1 = 'Self-harm',
domain = 'Injury and overdose',
date_resolution = 'year',
update_frequency = 'yearly',
source = 'WISQARS (CDC)',
url = 'https://wisqars.cdc.gov/',
geo_strata = 'none',
age_strata = 'Age.Group',
race_strata = 'none',
race_level = NA_character_,
additional_strata1 = 'Sex',
additional_strata_level = Sex,
sex_strata = 'none',
sex_level = NA_character_)
write.csv('./Data/plot_files/wisqars_self_harm.csv')
write.csv(wis1'./Data/plot_files/wisqars_self_harm.csv')
write.csv(wis1,'./Data/plot_files/wisqars_self_harm.csv')
write.csv(wis1,'./Data/Plot Files/wisqars_self_harm.csv')
library(tidyverse)
library(RSocrata)
library(parquetize)
library(arrow)
library(MMWRweek)
source('./R/Support Functions/archiving_functions.R') #function for archiving
#################################
#Overview
#################################
#Creates a time/date stamped parquet file in the folder indicated in runIfExpired.
#if a file has been downloaded within past week (24*7 hours),
#it just reads in latest file, otherwise it downloads fresh copy
#Check that formatting is consistent between vintages. (1) check column names (2) check variable formats
#compare newest data to previous dataset
#######################################
#Read in and archive latest Epic Files
#####################################
source('./R/Cleaning and Harmonization/EpicClean/harmonize_epic.R')
library(tidyverse)
source('./R/Cleaning and Harmonization/EpicClean/epic_age_import.R')
#EPIC ED all cause
epic_ed_all_latest_file = datetimeStamp( basepath='./Data/Archive/Cosmos ED/All visits/')$`Report Relative to Date` %>%
filter(Delta==min(Delta)) %>%
pull(filePath)
epic_ed_all <- epic_age_import(ds_name = paste0('./Data/Archive/Cosmos ED/All visits/',epic_ed_all_latest_file)) %>%
rename(N_ED_epic_all_cause = N_cases_epic) %>%
dplyr::select(geography, Level, date, N_ED_epic_all_cause)
epic_ed_all_latest_file
epic_ed_all <- epic_age_import(ds_name = paste0('./Data/Archive/Cosmos ED/All visits/',epic_ed_all_latest_file))
ds_name = paste0('./Data/Archive/Cosmos ED/All visits/',epic_ed_all_latest_file))
ds_name = paste0('./Data/Archive/Cosmos ED/All visits/',epic_ed_all_latest_file)
skipN=13
ds_out <- readr::read_csv(ds_name, skip=skipN, col_names=T)
ds_out <- readr::read_csv(ds_name, skip=skipN, col_names=T) %>%
rename(geography=`State of Residence (U.S.)`, age=`Age at Time of Visit`, year=Year, week=Week, N_cases="...5") %>%
tidyr::fill( geography, age, year, week, .direction = 'down') %>%
mutate(year_start= sub("^(.*?)\\s*–.*$", "\\1", year),
day_month_start= sub("^(.*?)\\s*–.*$", "\\1", week),
week_start = as.Date(paste(year_start, day_month_start, sep='-'), "%Y-%b %d"),
week_end= lubridate::ceiling_date(week_start, unit='week') -1
) %>%
dplyr::select(geography, age, week_end, N_cases )%>%
arrange(geography, age, week_end) %>%
#week END date
ungroup() %>%
mutate( N_cases = if_else(N_cases=='10 or fewer',NA_character_, N_cases),
N_cases = as.numeric(N_cases),
geography= if_else(geography=='Total', 'United States', geography)) %>%
mutate( Level = if_else(toupper(age) %in% toupper(c('Less than 1 years', 'Less than 1 year')), '<1 Years',
if_else( toupper(age) %in%  toupper(c('≥ 1 and < 5 years','1 year or more and less than 5 years')),'1-4 Years',
if_else(toupper(age) %in% toupper(c('≥ 5 and < 18 years','5 years or more and less than 18 years (1)')) , "5-17 Years",
if_else( toupper(age) %in% toupper(c("≥ 18 and < 50 years",'18 years or more and less than 50 years')) ,"18-49 Years" ,
if_else( toupper(age) %in% toupper(c("≥ 50 and < 64 years",'50 years or more and less than 64 years')) ,"50-64 Years" ,
if_else( toupper(age) %in% toupper(c("65 years or more","≥ 65 and < 110 years")) , "65+ Years" ,
if_else(age=='Total','Total',NA_character_
) ))))))) %>%
dplyr::select(-age) %>%
arrange( geography,Level, week_end) %>%
group_by( geography,Level) %>%
rename(N_cases_epic=N_cases) %>%
filter(week_end>='2023-07-01') %>%
ungroup() %>%
rename(date=week_end) %>%
filter(!is.na(geography))
ds_out <- readr::read_csv(ds_name, skip=skipN, col_names=T)
View(ds_out)
problems(ds_out)
ds_out <- readr::read_csv(ds_name, skip=skipN, col_names=T) %>%
rename(geography=`State of Residence (U.S.)`, age=`Age at Time of Visit`, year=Year, week=Week, N_cases="...5") %>%
tidyr::fill( geography, age, year, week, .direction = 'down') %>%
mutate(year_start= sub("^(.*?)\\s*–.*$", "\\1", year),
day_month_start= sub("^(.*?)\\s*–.*$", "\\1", week),
week_start = as.Date(paste(year_start, day_month_start, sep='-'), "%Y-%b %d"),
week_end= lubridate::ceiling_date(week_start, unit='week') -1
) %>%
dplyr::select(geography, age, week_end, N_cases )%>%
arrange(geography, age, week_end) %>%
#week END date
ungroup() %>%
mutate( N_cases = if_else(N_cases=='10 or fewer',NA_character_, N_cases),
N_cases = as.numeric(N_cases),
geography= if_else(geography=='Total', 'United States', geography)) %>%
mutate( Level = if_else(toupper(age) %in% toupper(c('Less than 1 years', 'Less than 1 year')), '<1 Years',
if_else( toupper(age) %in%  toupper(c('≥ 1 and < 5 years','1 year or more and less than 5 years')),'1-4 Years',
if_else(toupper(age) %in% toupper(c('≥ 5 and < 18 years','5 years or more and less than 18 years (1)')) , "5-17 Years",
if_else( toupper(age) %in% toupper(c("≥ 18 and < 50 years",'18 years or more and less than 50 years')) ,"18-49 Years" ,
if_else( toupper(age) %in% toupper(c("≥ 50 and < 64 years",'50 years or more and less than 64 years')) ,"50-64 Years" ,
if_else( toupper(age) %in% toupper(c("65 years or more","≥ 65 and < 110 years")) , "65+ Years" ,
if_else(age=='Total','Total',NA_character_
) ))))))) %>%
dplyr::select(-age) %>%
arrange( geography,Level, week_end) %>%
group_by( geography,Level) %>%
rename(N_cases_epic=N_cases) %>%
filter(week_end>='2023-07-01') %>%
ungroup() %>%
rename(date=week_end) %>%
filter(!is.na(geography))
#######################################
#Read in and archive latest Epic Files
#####################################
source('./R/Cleaning and Harmonization/EpicClean/harmonize_epic.R')
#EPIC ED RSV
epic_ed_rsv_latest_file = datetimeStamp( basepath='./Data/Archive/Cosmos ED/rsv/')$`Report Relative to Date` %>%
filter(Delta==min(Delta)) %>%
pull(filePath)
epic_ed_rsv <-
epic_age_import(ds_name = paste0('./Data/Archive/Cosmos ED/rsv/',epic_ed_rsv_latest_file))%>%
rename(N_ED_type = N_cases_epic) %>%
dplyr::select(geography, Level, date, N_ED_type) %>%
filter(!is.na(Level)) %>%
full_join(epic_ed_all, by = c('geography', 'Level', 'date')) %>%
arrange(Level, geography, date) %>%
group_by(Level, geography)  %>%
mutate(outcome_name = 'RSV')
# EPIC ED FLU
epic_ed_flu_latest_file = datetimeStamp( basepath='./Data/Archive/Cosmos ED/flu/')$`Report Relative to Date` %>%
filter(Delta==min(Delta)) %>%
pull(filePath)
epic_ed_flu <-
epic_age_import(ds_name = paste0('./Data/Archive/Cosmos ED/flu/',epic_ed_flu_latest_file), skipN=12)%>%
rename(N_ED_type = N_cases_epic) %>%
dplyr::select(geography, Level, date, N_ED_type) %>%
filter(!is.na(Level)) %>%
full_join(epic_ed_all, by = c('geography', 'Level', 'date')) %>%
arrange(Level, geography, date) %>%
group_by(Level, geography)  %>%
mutate(outcome_name = 'FLU')
epic_ed_flu <-
epic_age_import(ds_name = paste0('./Data/Archive/Cosmos ED/flu/',epic_ed_flu_latest_file), skipN=13)%>%
rename(N_ED_type = N_cases_epic) %>%
dplyr::select(geography, Level, date, N_ED_type) %>%
filter(!is.na(Level)) %>%
full_join(epic_ed_all, by = c('geography', 'Level', 'date')) %>%
arrange(Level, geography, date) %>%
group_by(Level, geography)  %>%
mutate(outcome_name = 'FLU')
# EPIC ED COVID
epic_ed_covid_latest_file = datetimeStamp( basepath='./Data/Archive/Cosmos ED/covid/')$`Report Relative to Date` %>%
filter(Delta==min(Delta)) %>%
pull(filePath)
epic_ed_covid <-
epic_age_import(ds_name = paste0('./Data/Archive/Cosmos ED/covid/',epic_ed_covid_latest_file))%>%
rename(N_ED_type = N_cases_epic) %>%
filter(!is.na(Level)) %>%
dplyr::select(geography, Level, date, N_ED_type) %>%
full_join(epic_ed_all, by = c('geography', 'Level', 'date')) %>%
arrange(Level, geography, date) %>%
group_by(Level, geography)  %>%
mutate(outcome_name = 'COVID')
epic_ed_combo <- bind_rows(epic_ed_rsv, epic_ed_flu , epic_ed_covid) %>%
filter(!is.na(Level)) %>%
arrange(outcome_name, Level, geography, date) %>%
group_by(outcome_name, Level, geography) %>%
mutate(
N_ED_type = if_else(
!is.na(N_ED_epic_all_cause) &
is.na(N_ED_type),
4.9999,
N_ED_type
),
#is suppressed <10 counts, set to 4.9999
pct_ED_epic = N_ED_type / N_ED_epic_all_cause * 100,
pct_ED_epic = if_else(N_ED_type<5, min(pct_ED_epic, na.rm=T)/2, pct_ED_epic ), #if suppressed, half of posiivity
pct_ED_epic_smooth = zoo::rollapplyr(pct_ED_epic,3,mean, partial=T, na.rm=T),
pct_ED_epic_smooth = if_else(is.nan(pct_ED_epic_smooth), NA, pct_ED_epic_smooth),
ED_epic_scale = 100 * pct_ED_epic_smooth / max(pct_ED_epic_smooth , na.rm =
T),
outcome_type = 'ED',
domain = 'Respiratory infections',
date_resolution = 'week',
update_frequency = 'weekly',
source = 'Epic Cosmos',
url = 'https://www.epicresearch.org/',
geo_strata = 'state',
age_strata = 'age_scheme_1',
race_strata = 'none',
race_level = NA_character_,
additional_strata1 = 'none',
additional_strata_level = NA_character_,
sex_strata = 'none',
sex_level = NA_character_,
age_strata = if_else(Level=='Total','none',age_strata ),
geo_strata = if_else(geography=='Total', 'none',geo_strata )
)  %>%
ungroup() %>%
rename(
Outcome_value1 = pct_ED_epic,
Outcome_value2 = pct_ED_epic_smooth,
Outcome_value3 = ED_epic_scale,
Outcome_value4 = N_ED_type,
Outcome_value5 = N_ED_epic_all_cause,
age_level = Level
) %>%
dplyr::select(
"geography",
"age_level",
"date",
"outcome_name",
"outcome_type",
"source",
"url",
"geo_strata",
"age_strata",
"race_strata",
"race_level",
"additional_strata1",
"additional_strata_level",
"sex_strata",
"sex_level",
"Outcome_value1",
"Outcome_value2",
"Outcome_value3" ,
"Outcome_value4",
"Outcome_value5"
) %>%
mutate(
outcome_label1 = 'Pct of ED visits (Epic)',
outcome_label2 = 'Pct of ED visits (Epic, smoothed)',
outcome_label3 = 'Pct of ED visits (Epic, smoothed and scaled)',
outcome_label4 = 'Number of ED visits for the outcome, Epic',
outcome_label5 = 'Number of ED visits for any outcome, Epic'
)
write_parquet(epic_ed_combo,
'./Data/Archive/Cosmos ED/flu_rsv_covid_epic_cosmos_ed.parquet')
lapply(list.files('./R/Data Pull/', full.names=T), function(X){
print(X)
source(X)
} )
wis1 <- read_csv('./Data/Archive/wisqars_self_harm/Raw/2025_04_15_self_harm.csv') %>%
mutate(Outcome_value1=as.numeric(`Crude Rate`), age_level=`Age Group`) %>%
dplyr::select(age_level,Sex, Year,Outcome_value1) %>%
mutate(outcome_type='Self harm',
outcome_label1 = 'Self-harm',
domain = 'Injury and overdose',
date_resolution = 'year',
update_frequency = 'yearly',
source = 'WISQARS (CDC)',
url = 'https://wisqars.cdc.gov/',
geo_strata = 'none',
age_strata = 'Age.Group',
race_strata = 'none',
race_level = NA_character_,
additional_strata1 = 'Sex',
additional_strata_level = Sex,
sex_strata = 'none',
sex_level = NA_character_)
write.csv(wis1,'./Data/Plot Files/wisqars_self_harm.csv')
epic_ed_rsv_flu_covid <- open_dataset( './Data/Archive/Cosmos ED/flu_rsv_covid_epic_cosmos_ed.parquet') %>%
collect()
e1 <- epic_ed_rsv_flu_covid %>%
mutate( geography= if_else(geography=='Total', 'United States', geography)
)
e1 %>%
write.csv(., './Data/Plot Files/rsv_flu_covid_epic_cosmos_age_state.csv')
combined_file_rsv <- bind_rows(nssp_harmonized_rsv, ww1_rsv_harmonized,h1_harmonized_rsv,e1,g1_state_harmonized_v1, g1_state_harmonized_v2) %>%
filter(date >=as.Date('2023-07-01') & age_strata=='none' & !outcome_name %in% c('FLU','COVID')) %>%
arrange(geography, outcome_label1,source,date) %>%
group_by(geography,outcome_label1, source) %>%
filter(date>='2023-07-01') %>%
mutate(outcome_3m = zoo::rollapplyr(Outcome_value1,3,mean, partial=T, na.rm=T),
outcome_3m = if_else(is.nan(outcome_3m), NA, outcome_3m),
outcome_3m_scale = outcome_3m / max(outcome_3m, na.rm=T)*100
)
dates2 <- MMWRweek(as.Date(combined_file_rsv$date))
max.wk.yr <- max(dates2$MMWRweek[dates2$MMWRyear==max(dates2$MMWRyear)])
combined_file_rsv <- cbind.data.frame(combined_file_rsv,dates2[,c('MMWRyear', 'MMWRweek')]) %>%
mutate( epiyr = MMWRyear,
epiyr = if_else(MMWRweek<=26,MMWRyear - 1 ,MMWRyear),
epiwk  = if_else( MMWRweek<=26, MMWRweek+52, MMWRweek  ),
epiwk=epiwk-26
)
write.csv(combined_file_rsv,'./Data/Plot Files/rsv_combined_all_outcomes_state.csv')
#########################################################
###Combined file for overlaid time series flu figure
#########################################################
combined_file_flu <- bind_rows(nssp_harmonized_flu, ww1_flu_harmonized,h1_harmonized_flu,e1) %>%
filter(date >=as.Date('2023-07-01') & age_strata=='none' & !outcome_name %in% c('COVID','RSV')) %>%
arrange(geography, outcome_label1,source,date) %>%
group_by(geography,outcome_label1, source) %>%
filter(date>='2023-07-01') %>%
mutate(outcome_3m = zoo::rollapplyr(Outcome_value1,3,mean, partial=T, na.rm=T),
outcome_3m = if_else(is.nan(outcome_3m), NA, outcome_3m),
outcome_3m_scale = outcome_3m / max(outcome_3m, na.rm=T)*100
)
dates2 <- MMWRweek(as.Date(combined_file_flu$date))
max.wk.yr <- max(dates2$MMWRweek[dates2$MMWRyear==max(dates2$MMWRyear)])
combined_file_flu <- cbind.data.frame(combined_file_flu,dates2[,c('MMWRyear', 'MMWRweek')]) %>%
mutate( epiyr = MMWRyear,
epiyr = if_else(MMWRweek<=26,MMWRyear - 1 ,MMWRyear),
epiwk  = if_else( MMWRweek<=26, MMWRweek+52, MMWRweek  ),
epiwk=epiwk-26
)
write.csv(combined_file_flu,'./Data/Plot Files/flu_combined_all_outcomes_state.csv')
#########################################################
###Combined file for overlaid time series COVID-19 figure
#########################################################
combined_file_covid <- bind_rows(nssp_harmonized_covid, ww1_covid_harmonized,h1_harmonized_covid,e1) %>%
filter(date >=as.Date('2023-07-01') & age_strata=='none' & !outcome_name %in% c('FLU','RSV')) %>%
arrange(geography, outcome_label1,source,date) %>%
group_by(geography,outcome_label1, source) %>%
filter(date>='2023-07-01') %>%
mutate(outcome_3m = zoo::rollapplyr(Outcome_value1,3,mean, partial=T, na.rm=T),
outcome_3m = if_else(is.nan(outcome_3m), NA, outcome_3m),
outcome_3m_scale = outcome_3m / max(outcome_3m, na.rm=T)*100
)
dates2 <- MMWRweek(as.Date(combined_file_covid$date))
max.wk.yr <- max(dates2$MMWRweek[dates2$MMWRyear==max(dates2$MMWRyear)])
combined_file_covid <- cbind.data.frame(combined_file_covid,dates2[,c('MMWRyear', 'MMWRweek')]) %>%
mutate( epiyr = MMWRyear,
epiyr = if_else(MMWRweek<=26,MMWRyear - 1 ,MMWRyear),
epiwk  = if_else( MMWRweek<=26, MMWRweek+52, MMWRweek  ),
epiwk=epiwk-26
)
write.csv(combined_file_covid,'./Data/Plot Files/covid_combined_all_outcomes_state.csv')
##############################################################
#################################################
### State map NSSP for flu. RSV, COVID
################################################
dates <- seq.Date(from=as.Date('2022-10-01'), to=Sys.Date(),by='week')
i=length(dates)-1
d1_state_rsv_flu_covid <- cdc_nssp_rsv_flu_covid_ed1 %>%
filter(county=='All'  ) %>%
rename(percent_visits_rsv_state =percent_visits_rsv,
percent_visits_covid_state =percent_visits_covid,
percent_visits_flu_state =percent_visits_influenza) %>%
# percent_visits_rsv_state=if_else(percent_visits_rsv>1,1,percent_visits_rsv) ) %>%
rename(state=geography) %>%
dplyr::select(state,week_end, percent_visits_rsv_state,percent_visits_covid_state, percent_visits_flu_state)
d1_all <- cdc_nssp_rsv_flu_covid_ed1 %>%
filter(county!='All' ) %>%
rename(state=geography) %>%
dplyr::select(state, county, fips, week_end, percent_visits_rsv,percent_visits_covid,percent_visits_influenza) %>%
left_join(d1_state_rsv_flu_covid, by=c('week_end', 'state')) %>%
mutate(percent_visits_covid = if_else(is.na(percent_visits_covid),percent_visits_covid_state,percent_visits_covid),
percent_visits_flu = if_else(is.na(percent_visits_influenza),percent_visits_flu_state,percent_visits_influenza ),
percent_visits_rsv = if_else(is.na(percent_visits_rsv),percent_visits_rsv_state,percent_visits_rsv ),
#fix CT county coding
fips = if_else(state=='Connecticut' & county=='Fairfield',9001 ,
if_else(state=='Connecticut' &  county=='Hartford', 9003,
if_else(state=='Connecticut'& county=='Litchfield', 9005 ,
if_else(state=='Connecticut' & county=='Middlesex',9007 ,
if_else(state=='Connecticut' & county=='New Haven', 9009 ,
if_else(state=='Connecticut' & county=='New London',9011 ,
if_else(state=='Connecticut' & county=='Tolland',9013 ,
if_else(state=='Connecticut' & county=='Windham', 9015, fips)))))))
) ) %>%
dplyr::select(state, county, fips, week_end,percent_visits_covid, percent_visits_flu, percent_visits_rsv) %>%
as.data.frame()
write.csv(d1_all,'./Data/Plot Files/rsv_flu_covid_county_filled_map_nssp.csv')
#
# ##Metro; Crosswalk the DMA to counties FIPS codes
# #https://www.kaggle.com/datasets/kapastor/google-trends-countydma-mapping?resource=download
# cw1 <- read.csv('./Data/other_data/GoogleTrends_CountyDMA_Mapping.csv') %>%
#   mutate(GOOGLE_DMA=toupper(GOOGLE_DMA))
#Metro region
#https://stackoverflow.com/questions/61213647/what-do-gtrendsr-statistical-areas-correlate-with
#Nielsen DMA map: http://bl.ocks.org/simzou/6459889
#read in 'countries' file from gtrendsR
# countries <- read.csv('./Data/other_data/countries_gtrendsR.csv')
# metros <- countries[countries$country_code == 'US', ]
#
# metros <-
#   metros[grep("[[:digit:]]", substring(metros$sub_code, first = 4)), ]
#
# metros$numeric.sub.area <- gsub('US-', '', metros$sub_code)
#
#
# dma_link1 <- cbind.data.frame('DMA_name'=metros$name,'DMA'=metros$numeric.sub.area) %>%
#   rename(DMA_ID=DMA) %>%
#   full_join(cw1, by=c("DMA_name"="GOOGLE_DMA")) %>%
#   dplyr::select(STATE , COUNTY, STATEFP, CNTYFP, DMA_ID) %>%
#   mutate(DMA_ID = as.numeric(DMA_ID)) %>%
#   filter(!is.na(DMA_ID))
#
#
#
# ##Google metro data
# url1 <- "https://github.com/DISSC-yale/gtrends_collection/raw/refs/heads/main/data/term=rsv/part-0.parquet"
# temp_file1 <- tempfile(fileext = ".parquet")
# download.file(url1, temp_file1, mode = "wb")
#
# g1_metro <- read_parquet(temp_file1) %>%
#   filter(!(location %in% g_states)) %>%
#   group_by(date, location, term) %>%
#   summarize(value=mean(value)) %>% #averages over duplicate pulls
#   ungroup() %>%
#   collect() %>%
#   mutate(date2=as.Date(date),
#          date = as.Date(ceiling_date(date2, 'week'))-1) %>%
#   mutate(location = as.numeric(location)) %>%
#   filter(!is.na(location)) %>%
#   rename(search_volume=value) %>%
#   filter(date == as.Date('2024-12-7')) %>%
#   left_join(dma_link1, by=c('location'='DMA_ID')) %>% #many to many join by date and counties
#    group_by(STATEFP,CNTYFP) %>%
#    mutate(fips=paste0(STATEFP,sprintf("%03d", CNTYFP)),
#           fips=as.numeric(fips)) %>%
#   ungroup() %>%
#          mutate( search_volume_scale = search_volume/max(search_volume,na.rm=T)*100) %>%
#    ungroup() %>%
#   dplyr::select(date, term, STATE, COUNTY, fips,search_volume_scale)
#
#
# usmap::plot_usmap(data=g1_metro,regions='county', values='search_volume_scale',
#                   color = NA,    # Faint border color
#                   size = 0     )+      # Thin border lines)   +
#   theme(panel.background = element_rect(color = "white", fill = "white")) +
#   scale_fill_gradientn(
#     scaletitle,
#     colors = pal1,
#     values = scales::rescale(c(0, 25,50, 75, 100)),
#     limits = c(0, 100),
#     na.value = "darkgray"
#   )
################
##Pneumococcal disease
################
#csv_to_parquet('https://data.cdc.gov/resource/qvzb-qs6p.csv',path_to_parquet ='./Data/ipd_cdc1998.parquet')
ipd1 <- readRDS('./Data/Archive/pneumococcus/ABCs_st_1998_2023.rds') %>%
rename(agec = "Age.Group..years.",
year=Year,
st=IPD.Serotype,
N_IPD = Frequency.Count) %>%
mutate( st= if_else(st=='16','16F', st),
agec1 = if_else(agec %in% c("Age <2","Age 2-4") ,1,2 ),
agec=gsub('Age ', '', agec),
agec2 = if_else( agec %in% c('<2','2-4'), '<5',
if_else( agec %in% c('5-17','18-49'), '5-49',
if_else( agec %in% c('50-64','65+'), '50+',NA))),
agec2 = factor(agec2, levels=c('<5','5-49','50+'), labels=c('<5 years', '5-49 years', '50+ years') )
) %>%
group_by(st,agec2, year) %>%
summarize(N_IPD=sum(N_IPD)) %>%
ungroup()
write.csv(ipd1, './Data/Plot Files/ipd_serotype_age_year.csv')
# pneumococcal serotype by state
b2019 <- read.csv('./Data/Archive/pneumococcus/jiac058_suppl_supplementary_table_s2.csv') %>%
group_by(State, sero) %>%
summarize(N_cases=n()) %>%
mutate(sero=as.factor(sero)) %>%
ungroup() %>%
group_by(State, sero) %>%
mutate(mean_cases=max(N_cases,na.rm=T)
) %>%
group_by(State) %>%
mutate(         pct = N_cases/sum(N_cases, na.rm=T)*100) %>%
ungroup() %>%
tidyr::complete(sero,State , fill=list(pct=0))  #fills 0
write.csv(b2019, './Data/Plot Files/ipd_serotype_state_pct.csv')
library(tidyverse)
library(RSocrata)
library(parquetize)
library(arrow)
library(MMWRweek)
source('./R/Support Functions/API Interactions.R') #function for archiving
source('./R/Support Functions/API Interaction.R') #function for archiving
#######################################
#Read in and archive latest Epic Files
#####################################
source('./R/Cleaning and Harmonization/EpicClean/harmonize_epic.R')
lapply(list.files('./R/Data Pull/', full.names=T), function(X){
print(X)
source(X)
} )
g_states <- paste('US',state.abb,sep='-')
url2 <- "https://github.com/DISSC-yale/gtrends_collection/raw/refs/heads/main/data/term=Naloxone/part-0.parquet" #rsv vaccination category
temp_file2 <- tempfile(fileext = ".parquet")
download.file(url2, temp_file2, mode = "wb")
library(tidyverse)
library(RSocrata)
library(parquetize)
library(arrow)
library(MMWRweek)
source('./R/Support Functions/archiving_functions.R') #function for archiving
source('./R/Support Functions/API Interaction.R') #function for archiving
#######################################
#Read in and archive latest Epic Files
#####################################
source('./R/Cleaning and Harmonization/EpicClean/harmonize_epic.R')
lapply(list.files('./R/Data Pull/', full.names=T), function(X){
print(X)
source(X)
} )
